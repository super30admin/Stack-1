//TC: O(N)
//SC: O(N)

//approach: Idea is to use stack to store smaller value until greater value is encountered.
//Traverse array TWICE by restarting from 0 due to circular property of given Array

class Solution {
    public int[] nextGreaterElements(int[] nums) {
        if(nums == null || nums.length == 0){
            return new int[]{};
        }
        int[] result = new int[nums.length];
        Arrays.fill(result, -1);    //Initializing array with -1
        
        Stack<Integer> stk = new Stack<>();
        for(int i = 0; i < nums.length ; i++){
            while(!stk.isEmpty() && nums[i] > nums[stk.peek()]){
                result[stk.pop()] = nums[i];
            }
            stk.push(i);
        }

        int restart = 0;    //Traversing again until to satisfy circular property for smaller elements at the end
        while(!stk.isEmpty() && restart < nums.length){ 
            if(nums[restart] > nums[stk.peek()]){
                result[stk.pop()] = nums[restart];
            }else{
                restart++;
            }
        }
        return result;
    }
}
