/**********
Time O(n^2)
Space O(n)
Leetcode yes
Problem no
Initially index of first element is pushed in stack, now we check if element in stack is less than the current element 
that we are on in traversal. If it is then it is poped from stack and current element is added to the index that
we gor from stack. We keep on doing this for the current element until we find an element from stack which is greater
than current element. if this is the case we push index of current element in stack. To handle the case of circular, we 
iterate through the array twice and hence instead of pushing index i we push i%nums.length to prevent out of bound exception.
**************/


class Solution {
    public int[] nextGreaterElements(int[] nums) {
        
        Stack<Integer> stack = new Stack<>();
        int[] result = new int[nums.length];
        int n = nums.length;
        Arrays.fill(result, -1);
        
        for(int i =0; i< n*2 ; i++)
        {
            while(!stack.isEmpty() && nums[stack.peek()] < nums[i%n])
                result[stack.pop()] = nums[i%n];
            
            if(i<n)
                stack.push(i);
        }

        return result;
        
    }
}
